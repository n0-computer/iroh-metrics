searchState.loadedDescShard("iroh_metrics", 0, "Metrics library for iroh\nOpen Metrics <code>Counter</code> to measure discrete events.\nA `Counter.\nA <code>Counter</code> value.\nPotential errors from this library.\nOpen Metrics <code>Gauge</code>.\nA `Gauge.\nA <code>Gauge</code> value.\nAny IO related error.\nTrait for metric items.\nA metric item with its current value.\nThe types of metrics supported by this crate.\nThe value of an individual metric item.\nTrait for structs containing metric items.\nDerives <code>MetricsGroup</code>, <code>Iterable</code> and <code>Default</code> for a struct.\nTrait for a set of structs implementing <code>MetricsGroup</code>.\nIterator over metric items.\nIndicates that the metrics have not been enabled.\nA metric registry.\nCasts this metric to <code>Any</code> for downcasting to concrete types.\nDecreases the <code>Gauge</code> by 1, returning the previous value.\nDecrements the given metric by 1.\nDecreases the <code>Gauge</code> by <code>i64</code>, returning the previous value.\nDecrements the given metric by <code>n</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current value of the <code>Counter</code>.\nReturns the <code>Gauge</code> value.\nReturns an iterator over the <code>MetricsGroup</code> in this struct.\nReturns the help string for this metric.\nIncreases the <code>Counter</code> by 1, returning the previous value.\nIncreases the <code>Gauge</code> by 1, returning the previous value.\nIncrements the given metric by 1.\nIncreases the <code>Counter</code> by <code>u64</code>, returning the previous value.\nIncreases the <code>Gauge</code> by <code>i64</code>, returning the previous value.\nIncrements the given metric by <code>n</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all metric items with their …\nReturns an iterator over all metric items with their …\nReturns an iterator over all metrics in this metrics group …\nReturns an iterator over all metrics in this metrics group …\nTraits for iterating over the fields of structs.\nReturns the name of this metrics group.\nReturns the name of this metrics group set.\nReturns the name of this metric item.\nConstructs a new counter, based on the given <code>help</code>.\nConstructs a new gauge, based on the given <code>help</code>.\nParses Prometheus metrics from a string.\nRegisters all metric items in this metrics group to a …\nRegisters all metric items in this metrics group to a …\nRegister all metrics groups in this set onto a prometheus …\nRegister all metrics groups in this set onto a prometheus …\nRegister a metric with the <code>Registry</code>.\nRegister a <code>Collector</code>.\nRegister a metric with the <code>Registry</code> specifying the metric…\nFunctions to start services that deal with metrics exposed …\nSets the <code>Counter</code> value, returning the previous value.\nSets the <code>Gauge</code> to <code>v</code>, returning the previous value.\nSets the given metric to <code>n</code>.\nMetrics collection in a static, process-level global …\nLike <code>Registry::sub_registry_with_prefix</code> but with a label …\nLike <code>Registry::sub_registry_with_prefix</code> but with multiple …\nCreate a sub-registry to register metrics with a common …\nReturns the value as <code>f32</code>.\nReturns the type of this metric.\nReturns the current value of this metric.\nCreates a new default <code>Registry</code> with the given labels.\nCreates a new default <code>Registry</code> with the given prefix.\nCreates a new default <code>Registry</code> with the given prefix and …\nIterator over the fields of a struct.\nHelper trait to convert from <code>self</code> to <code>dyn Iterable</code>.\nTrait for iterating over the fields of a struct.\nDerives <code>Iterable</code> for a struct.\nReturns <code>self</code> as <code>dyn Iterable</code>\nReturns the number of fields in the struct.\nReturns an iterator over the fields of the struct.\nReturns the field name and dyn reference to the field.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfiguration for pushing metrics to a remote endpoint.\nHelper trait to abstract over different ways to access …\nA cloneable <code>Registry</code> in a read-write lock.\nEncodes all metrics into a string in the Open Metrics text …\nThe endpoint url for the push metrics collector.\nReturns the argument unchanged.\nThe name of the instance you’re exporting metrics for.\nThe push interval.\nCalls <code>U::from(self)</code>.\nThe password for basic auth for the push metrics collector.\nThe name of the service you’re exporting metrics for.\nStart a metrics dumper service.\nStart a metrics exporter service.\nStart a HTTP server to expose metrics .\nThe username for basic auth for the push metrics collector.\nCore is the base metrics struct.\nThis struct can be used with the functions in …\nEncodes the current metrics registry to a string in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the core metrics.\nReturns a reference to the mapped metrics instance.\nMust only be called once to init metrics.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a reference to the prometheus registry.\nTrieds to init the metrics.")