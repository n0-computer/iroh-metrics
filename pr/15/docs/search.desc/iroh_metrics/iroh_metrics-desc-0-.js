searchState.loadedDescShard("iroh_metrics", 0, "Metrics library for iroh\nOpen Metrics <code>Counter</code> to measure discrete events.\nA <code>Counter</code> value.\nA `Counter.\nPotential errors from this library.\nOpen Metrics <code>Gauge</code>.\nA <code>Gauge</code> value.\nA `Gauge.\nAny IO related error.\nReturns the metric item representation.\nA metric item with its current value.\nThe types of metrics supported by this crate.\nThe value of an individual metric item.\nDescription of a group of metrics.\nExtension methods for types implementing <code>MetricsGroup</code>.\nTrait for a set of structs implementing <code>MetricsGroup</code>.\nIndicates that the metrics have not been enabled.\nA metric registry.\nIterator over metric items with their values.\nThe actual prometheus counter.\nDecrease the <code>Gauge</code> by 1, returning the previous value.\nDecrements the given gauge by 1.\nDecrease the <code>Gauge</code> by <code>i64</code>, returning the previous value.\nDecrements the given gauge <code>n</code>.\nReturns the metrics descriptions.\nReturns the metrics descriptions.\nThe description of this metric item.\nThe description of the metric.\nWhat this counter measures.\nWhat this gauge tracks.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe actual prometheus gauge.\nGet the current value of the <code>Counter</code>.\nGet the <code>Gauge</code> value.\nIncrease the <code>Counter</code> by 1, returning the previous value.\nIncrease the <code>Gauge</code> by 1, returning the previous value.\nIncrements the given counter or gauge by 1.\nIncrease the <code>Counter</code> by <code>u64</code>, returning the previous value.\nIncrease the <code>Gauge</code> by <code>i64</code>, returning the previous value.\nIncrements the given counter or gauge by <code>n</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator of references to structs implementing …\nThe name of this metric group.\nReturns the name of this metrics group set.\nThe name of this metric item.\nThe name of the metric.\nCreate a new instance and register with a registry.\nCreate a new instance and register with a registry.\nConstructs a new counter, based on the given <code>description</code>.\nConstructs a new gauge, based on the given <code>description</code>.\nParses Prometheus metrics from a string.\nInitializes this metric group.\nInitializes this metric group.\nRegister all metrics groups in this set onto a prometheus …\nRegister all metrics groups in this set onto a prometheus …\nRegister a metric with the <code>Registry</code>.\nRegister a <code>Collector</code>.\nRegister a metric with the <code>Registry</code> specifying the metric…\nFunctions to start services that deal with metrics exposed …\nSet the <code>Counter</code> value. Warning: this is not default …\nSet the <code>Gauge</code> value.\nSets the given counter or gauge to <code>n</code>.\nMetrics collection in a static, process-level global …\nReexports <code>struct_iterable</code> to make matching versions easier.\nLike <code>Registry::sub_registry_with_prefix</code> but with a label …\nLike <code>Registry::sub_registry_with_prefix</code> but with multiple …\nCreate a sub-registry to register metrics with a common …\nReturns the value as <code>f32</code>.\nThe type of this metric item.\nThe type of the metric.\nThe current value.\nReturns an iterator over all metric items with their …\nReturns an iterator over all metric items with their …\nCreates a new default <code>Registry</code> with the given labels.\nCreates a new default <code>Registry</code> with the given prefix.\nCreates a new default <code>Registry</code> with the given prefix and …\nConfiguration for pushing metrics to a remote endpoint.\nHelper trait to abstract over different ways to access …\nA cloneable <code>Registry</code> in a read-write lock.\nEncodes all metrics into a string in the Open Metrics text …\nThe endpoint url for the push metrics collector.\nReturns the argument unchanged.\nThe name of the instance you’re exporting metrics for.\nThe push interval.\nCalls <code>U::from(self)</code>.\nThe password for basic auth for the push metrics collector.\nThe name of the service you’re exporting metrics for.\nStart a metrics dumper service.\nStart a metrics exporter service.\nStart a HTTP server to expose metrics .\nThe username for basic auth for the push metrics collector.\nCore is the base metrics struct.\nThis struct can be used with the functions in …\nEncodes the current metrics registry to a string in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the core metrics.\nReturns a reference to the mapped metrics instance.\nMust only be called once to init metrics.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a reference to the prometheus registry.\nTrieds to init the metrics.")