searchState.loadedDescShard("iroh_metrics", 0, "Metrics library for iroh\nOpen Metrics <code>Counter</code> to measure discrete events.\nOpen Metrics <code>Counter</code> to measure discrete events.\nPotential errors from this library.\nOpen Metrics <code>Gauge</code>.\nOpen Metrics <code>Gauge</code>.\nInterface for all distribution based metrics.\nAny IO related error.\nDescription of a group of metrics.\nExtension methods for types implementing <code>Metric</code>.\nReturns the metric item representation.\nTrait for a set of structs implementing <code>Metric</code>.\nInterface for all single value based metrics.\nIndicates that the metrics have not been enabled.\ndeprecated\nThe actual prometheus counter.\nThe actual prometheus counter.\nDecrements the given gauge by 1.\nDecrements the given gauge <code>n</code>.\nThe description of the metric.\nWhat this counter measures.\nWhat this counter measures.\nWhat this gauge tracks.\nWhat this gauge tracks.\nReturns the argument unchanged.\nThe actual prometheus gauge.\nThe actual prometheus gauge.\nIncrements the given counter or gauge by 1.\nIncrements the given counter or gauge by <code>n</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator of references to structs implementing …\nThe name of this metric group.\nReturns the name of this metrics group set.\nReturns the name of the metric\nReturns the name of the metric\nThe name of the metric.\nParses Prometheus metrics from a string.\nFunctions to start services that deal with metrics exposed …\nSets the given counter or gauge to <code>n</code>.\nMetrics collection in a static, process-level global …\nReexports <code>struct_iterable</code> to make matching versions easier.\nThe type of the metric.\nOpen Metrics <code>Counter</code> to measure discrete events.\nOpen Metrics <code>Counter</code> to measure discrete events.\nOpen Metrics <code>Gauge</code>.\nOpen Metrics <code>Gauge</code>.\nInterface for all distribution based metrics.\nDescription of a group of metrics.\nExtension methods for types implementing <code>Metric</code>.\nReturns the metric item representation.\nTrait for a set of structs implementing <code>Metric</code>.\nInterface for all single value based metrics.\nThe actual prometheus counter.\nThe actual prometheus counter.\nDecrease the <code>Gauge</code> by 1, returning the previous value.\nDecrease the <code>Gauge</code> by <code>i64</code>, returning the previous value.\nReturns the metrics descriptions.\nReturns the metrics descriptions.\nReturns the metrics descriptions.\nThe description of the metric.\nWhat this counter measures.\nWhat this counter measures.\nWhat this gauge tracks.\nWhat this gauge tracks.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe actual prometheus gauge.\nThe actual prometheus gauge.\nGet the current value of the <code>Counter</code>.\nGet the <code>Gauge</code> value.\nIncrease the <code>Counter</code> by 1, returning the previous value.\nIncrease the <code>Gauge</code> by 1, returning the previous value.\nIncrease the <code>Counter</code> by <code>u64</code>, returning the previous value.\nIncrease the <code>Gauge</code> by <code>i64</code>, returning the previous value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator of references to structs implementing …\nThe name of this metric group.\nReturns the name of this metrics group set.\nReturns the name of the metric\nReturns the name of the metric\nThe name of the metric.\nCreate a new instance and register with a registry.\nCreate a new instance and register with a registry.\nCreate a new instance and register with a registry.\nConstructs a new counter, based on the given <code>description</code>.\nConstructs a new gauge, based on the given <code>description</code>.\nInitializes this metric group.\nInitializes this metric group.\nInitializes this metric group.\nRegister all metrics groups in this set onto a prometheus …\nRegister all metrics groups in this set onto a prometheus …\nRegister all metrics groups in this set onto a prometheus …\nSet the <code>Counter</code> value. Warning: this is not default …\nSet the <code>Gauge</code> value.\nThe type of the metric.\nConfiguration for pushing metrics to a remote endpoint.\nHelper trait to abstract over different ways to access …\nA cloneable <code>Registry</code> in a read-write lock.\nEncodes all metrics into a string in the Open Metrics text …\nThe endpoint url for the push metrics collector.\nReturns the argument unchanged.\nThe name of the instance you’re exporting metrics for.\nThe push interval.\nCalls <code>U::from(self)</code>.\nThe password for basic auth for the push metrics collector.\nThe name of the service you’re exporting metrics for.\nStart a metrics dumper service.\nStart a metrics exporter service.\nStart a HTTP server to expose metrics .\nThe username for basic auth for the push metrics collector.\nCore is the base metrics struct.\nThis struct can be used with the functions in …\nEncodes the current metrics registry to a string in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the core metrics.\nReturns a reference to the mapped metrics instance.\nMust only be called once to init metrics.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a reference to the prometheus registry.\nTrieds to init the metrics.")