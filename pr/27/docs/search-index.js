var searchIndex = new Map(JSON.parse('[["iroh_metrics",{"t":"FPPGPFPPPKFGGKYKYKPFMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNQNNNNNNMNHNNNNNNNNNNNNNNNNNNNNNNNNMMNNNQNNQNNNNNNNNNNNCMMNNNNHNNNNNCNNQNCNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNMNNNOOOOOFKKYMNNMNMNNNNNNNNNFINNNNNNNNONNNOONOOHHHNNNNOFFNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Counter","","","Error","Fmt","Gauge","","","IO","Metric","MetricItem","MetricType","MetricValue","MetricsGroup","","MetricsGroupSet","","MetricsSource","NoMetrics","Registry","as_any","","","","as_error_source","as_str","backtrace","borrow","","","","","","","borrow_mut","","","","","","","cause","clone","","","clone_into","","","clone_to_uninit","","","dec","","dec_by","","default","","","description","deserialize","","encode_openmetrics","","encode_openmetrics_eof","encode_openmetrics_to_string","","encode_openmetrics_to_writer","eq","","fmt","","","","","","","","from","","","","","","","","","get","","groups","groups_cloned","help","inc","","","inc_by","","","into","","","","","","","iter","","","","iterable","name","","","new","","","parse_prometheus_metrics","register","register_all","register_all_prefixed","serialize","","service","set","","","source","static_core","sub_registry_with_label","sub_registry_with_labels","sub_registry_with_prefix","to_f32","to_owned","","","to_string","try_from","","","","","","","try_into","","","","","","","type","","","","","type_id","","","","","","","value","","","","backtrace","","","source","","FieldIter","IntoIterable","Iterable","","as_iterable","borrow","borrow_mut","field_count","field_iter","field_ref","fmt","from","into","into_iter","next","size_hint","try_from","try_into","type_id","MetricsExporterConfig","RwLockRegistry","borrow","borrow_mut","clone","clone_into","clone_to_uninit","default","deserialize","encode_openmetrics","endpoint","eq","fmt","from","instance_name","interval","into","password","service_name","start_metrics_dumper","start_metrics_exporter","start_metrics_server","to_owned","try_from","try_into","type_id","username","Core","GlobalRegistry","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","default","encode_openmetrics","","fmt","","from","","get","get_collector","init","into","","registry","to_owned","try_from","","try_init","try_into","","type_id",""],"q":[[0,"iroh_metrics"],[165,"iroh_metrics::Error"],[170,"iroh_metrics::iterable"],[189,"iroh_metrics::service"],[216,"iroh_metrics::static_core"],[246,"iroh_metrics::metrics"],[247,"core::any"],[248,"iroh_metrics::base"],[249,"core::error"],[250,"std::backtrace"],[251,"core::option"],[252,"iroh_metrics::registry"],[253,"core::result"],[254,"serde::de"],[255,"core::fmt"],[256,"alloc::string"],[257,"std::io::error"],[258,"core::iter::traits::iterator"],[259,"alloc::sync"],[260,"std::collections::hash::map"],[261,"serde::ser"],[262,"alloc::borrow"],[263,"core::convert"],[264,"core::iter::traits::collect"],[265,"std::path"],[266,"core::time"],[267,"core::net::socket_addr"],[268,"core::clone"],[269,"erased_set"],[270,"core::ops::function"],[271,"iroh_metrics_derive"]],"i":"`A`Al`Ad`210`````````0`bhjl46426510Bd5376210553763763761`1`210521Bj1`001874873216648732166632Cl0543`43`5984327D`011`016654`33354`54`8`33396:986:954386:95438769546:954387654GfGhGj10````EjDf0El20111111111``F`000000Fb111111111```11111``FnG`10111010101000010011001010","f":"````````````````````{{{d{b}}}{{d{f}}}}{{{d{h}}}{{d{f}}}}{{{d{j}}}{{d{f}}}}{{{d{l}}}{{d{f}}}}{d{{d{n}}}}{{{d{A`}}}{{d{Ab}}}}{{{d{Ad}}}{{Ah{{d{Af}}}}}}{d{{d{c}}}{}}000000{{{d{Aj}}}{{d{Ajc}}}{}}000000{{{d{Ad}}}{{Ah{{d{n}}}}}}{{{d{h}}}h}{{{d{A`}}}A`}{{{d{Al}}}Al}{{d{d{Ajc}}}An{}}00{{dB`}An}00{{{d{l}}}Bb}`{{{d{l}}Bb}Bb}`{{}j}{{}l}{{}Bd}{{{d{Ad}}}{{d{Ab}}}}{c{{Bf{j}}}Bh}{c{{Bf{l}}}Bh}{{{d{Bj}}{d{Ajc}}}{{Bf{AnAd}}}Bl}{{{d{Bd}}{d{Ajc}}}{{Bf{AnAd}}}Bl}{{{d{Ajc}}}BnBl}{{{d{Bj}}}{{Bf{C`Ad}}}}0{{{d{Bd}}{d{Ajc}}}BnBl}{{{d{A`}}{d{A`}}}Cb}{{{d{Al}}{d{Al}}}Cb}{{{d{h}}{d{AjCd}}}Bn}{{{d{A`}}{d{AjCd}}}Bn}{{{d{Al}}{d{AjCd}}}Bn}{{{d{j}}{d{AjCd}}}Bn}{{{d{l}}{d{AjCd}}}Bn}{{{d{Bd}}{d{AjCd}}}Bn}{{{d{Ad}}{d{AjCd}}}Bn}0{cc{}}00000{CfAd}{ChAd}2{{{d{j}}}Cj}{{{d{l}}}Bb}{{{d{Cl}}}{{`{{Db{}{{Cn{{d{D`}}}}}}}}}}{{{d{Cl}}}{{`{{Db{}{{Cn{{Dd{D`}}}}}}}}}}{{{d{h}}}{{d{Ab}}}}43`{{{d{j}}Cj}Cj}{{{d{l}}Bb}Bb}`{{}c{}}000000{{{d{D`}}}Df}0{{{d{Cl}}}{{`{{Db{}{{Cn{{Dh{{d{Ab}}h}}}}}}}}}}0`{{{d{D`}}}{{d{Ab}}}}{{{d{Cl}}}{{d{Ab}}}}7{{{d{Ab}}{d{Ab}}{d{b}}}h}{{}j}{{}l}{{{d{Ab}}}{{Dl{C`Dj}}}}{{{d{AjBd}}{Dd{D`}}}An}{{{d{AjBd}}{d{c}}}AnCl}0{{{d{j}}c}BfDn}{{{d{l}}c}BfDn}`>=`{{{d{Ad}}}{{Ah{{d{n}}}}}}`{{{d{AjBd}}ce}{{d{AjBd}}}{{Eb{{E`{Ab}}}}}{{Eb{{E`{Ab}}}}}}{{{d{AjBd}}g}{{d{AjBd}}}{{Eb{{E`{Ab}}}}}{{Eb{{E`{Ab}}}}}{{Ed{}{{Cn{{Dh{ce}}}}}}}}{{{d{AjBd}}c}{{d{AjBd}}}{{Eb{{E`{Ab}}}}}}{{{d{Al}}}Ef}{dc{}}00{dC`}{c{{Bf{e}}}{}{}}000000{{}{{Bf{c}}}{}}000000{{{d{b}}}A`}{{{d{h}}}A`}{{{d{Al}}}A`}{{{d{j}}}A`}{{{d{l}}}A`}{dEh}000000{{{d{b}}}Al}{{{d{h}}}Al}{{{d{j}}}Al}{{{d{l}}}Al}`````````{{{d{Ej}}}{{d{El}}}}{d{{d{c}}}{}}{{{d{Aj}}}{{d{Ajc}}}{}}{{{d{El}}}En}{{{d{Ej}}}Df}{{{d{El}}En}{{Ah{h}}}}{{{d{Df}}{d{AjCd}}}Bn}{cc{}}{{}c{}}{{}c{}}{{{d{AjDf}}}{{Ah{c}}}{}}{{{d{Df}}}{{Dh{En{Ah{En}}}}}}{c{{Bf{e}}}{}{}}{{}{{Bf{c}}}{}}{dEh}``=<{{{d{F`}}}F`}{{d{d{Ajc}}}An{}}{{dB`}An}{{}F`}{c{{Bf{F`}}}Bh}{{{d{Fb}}{d{Ajc}}}{{Bf{AnAd}}}Bl}`{{{d{F`}}{d{F`}}}Cb}{{{d{F`}}{d{AjCd}}}Bn}?``>``{{FdFfc}{{Bf{AnAd}}}Bj}{{F`c}{{Bf{AnAd}}}Bj}{{Fhc}{{Fj{An}}}{BjFl}}{dc{}}>=<```{d{{d{c}}}{}}0{{{d{Aj}}}{{d{Ajc}}}{}}0{{{d{Fn}}}Fn}=<{{}G`}{{{d{Fn}}{d{Ajc}}}{{Bf{AnAd}}}Bl}{{{d{G`}}}C`}{{{d{Fn}}{d{AjCd}}}Bn}{{{d{G`}}{d{AjCd}}}Bn}{cc{}}0{{}{{Ah{{d{G`}}}}}}{{{d{G`}}}{{Ah{{d{c}}}}}D`}{cAn{{Gd{{d{AjBd}}{d{AjGb}}}}}}{{}c{}}0{{{d{G`}}}{{d{Bd}}}}>{c{{Bf{e}}}{}{}}0{c{{Fj{An}}}{{Gd{{d{AjBd}}{d{AjGb}}}}}}{{}{{Bf{c}}}{}}0{dEh}0","D":"Od","p":[[10,"Metric",0,246],[1,"reference",null,null,1],[10,"Any",247],[5,"MetricItem",0,248],[5,"Counter",0,246],[5,"Gauge",0,246],[10,"Error",249],[6,"MetricType",0,246],[1,"str"],[6,"Error",0],[5,"Backtrace",250],[6,"Option",251,null,1],[0,"mut"],[6,"MetricValue",0,246],[1,"unit"],[1,"u8"],[1,"i64"],[5,"Registry",0,252],[6,"Result",253,null,1],[10,"Deserializer",254],[10,"MetricsSource",0,252],[10,"Write",255],[8,"Result",255],[5,"String",256],[1,"bool"],[5,"Formatter",255],[5,"Error",255],[5,"Error",257],[1,"u64"],[10,"MetricsGroupSet",0,248],[17,"Item"],[10,"MetricsGroup",0,248],[10,"Iterator",258],[5,"Arc",259,null,1],[5,"FieldIter",170],[1,"tuple",null,null,1],[1,"f64"],[5,"HashMap",260],[10,"Serializer",261],[6,"Cow",262],[10,"Into",263],[10,"IntoIterator",264],[1,"f32"],[5,"TypeId",247],[10,"IntoIterable",170],[10,"Iterable",170],[1,"usize"],[5,"MetricsExporterConfig",189],[8,"RwLockRegistry",189],[5,"PathBuf",265],[5,"Duration",266],[6,"SocketAddr",267],[8,"Result",257],[10,"Clone",268],[5,"GlobalRegistry",216],[5,"Core",216],[5,"ErasedSyncSet",269],[10,"FnOnce",270],[15,"NoMetrics",165],[15,"Fmt",165],[15,"IO",165]],"r":[[0,246],[5,246],[9,246],[10,248],[11,246],[12,246],[13,248],[14,271],[15,248],[16,271],[17,252],[19,252],[63,252],[173,271]],"b":[[75,"impl-Debug-for-Error"],[76,"impl-Display-for-Error"],[83,"impl-From%3CError%3E-for-Error"],[84,"impl-From%3CError%3E-for-Error"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAHwAFQAXAAIAGwAYADgABQA/AAAARAAJAFQAAQB4AAEAfgAAAIQAEQCZAAgApAAGALAAAQC1AAAAuAAFAMAABwDJAAEA1AADANsACADlAAEA7wACAPMAAwA=","P":[[27,"T"],[41,""],[45,"T"],[48,""],[59,"__D"],[61,""],[64,""],[66,""],[67,""],[77,"T"],[83,""],[85,"T"],[86,""],[97,"U"],[104,""],[117,""],[119,"__S"],[122,""],[127,","],[128,",,"],[129,""],[130,""],[131,"T"],[134,""],[135,"U,T"],[142,"U"],[149,""],[175,"T"],[177,""],[181,"T"],[182,"U"],[183,"I"],[184,"Iterator::Item"],[185,""],[186,"U,T"],[187,"U"],[188,""],[191,"T"],[193,""],[194,"T"],[195,""],[197,"__D"],[198,""],[200,""],[202,"T"],[205,"U"],[208,""],[211,"T"],[212,"U,T"],[213,"U"],[214,""],[218,"T"],[222,""],[223,"T"],[224,""],[226,""],[227,""],[230,"T"],[232,""],[233,"T"],[234,"F"],[235,"U"],[237,""],[238,"T"],[239,"U,T"],[241,"F"],[242,"U"],[244,""]]}],["iroh_metrics_derive",{"t":"YYY","n":["Iterable","MetricsGroup","MetricsGroupSet"],"q":[[0,"iroh_metrics_derive"]],"i":"```","f":"```","D":"`","p":[],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAMAEAAAAAAAAQACAAMA","P":[]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[7885,232]}