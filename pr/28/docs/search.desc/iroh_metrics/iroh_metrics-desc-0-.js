searchState.loadedDescShard("iroh_metrics", 0, "Metrics library for iroh\nOpenMetrics <code>Counter</code> to measure discrete events.\nA <code>Counter</code>.\nA <code>Counter</code> value.\nDecoder for metrics received from an <code>Encoder</code>\nIterator over decoded metric items.\nTrait for types that can provide metric encoding …\nEncoder for converting metrics from a registry into …\nPotential errors from this library.\nWriting the metrics to the output buffer failed.\nOpenMetrics <code>Gauge</code>.\nA <code>Gauge</code>.\nA <code>Gauge</code> value.\nAny IO related error.\nA metric item combining schema and value information.\nSchema information for a single metric item.\nTrait for metric items.\nA metric item with its current value.\nThe types of metrics supported by this crate.\nThe value of an individual metric item.\nTrait for structs containing metric items.\nDerives <code>MetricsGroup</code> and <code>Iterable</code>.\nTrait for a set of structs implementing <code>MetricsGroup</code>.\nDerives <code>MetricsGroupSet</code> for a struct.\nHelper trait to abstract over different ways to access …\nIndicates that the metrics have not been enabled.\nA registry for <code>MetricsGroup</code>.\nA cloneable <code>Registry</code> in a read-write lock.\nA collection of metric schemas.\nAn update containing schema and/or values for metrics.\nA collection of metric values.\nCasts this metric to <code>Any</code> for downcasting to concrete types.\nReturns the inner metric as <code>Any</code>, for further downcasting …\nReturns the given metric type’s str representation.\nDecreases the <code>Gauge</code> by 1, returning the previous value.\nDecrements the given metric by 1.\nDecreases the <code>Gauge</code> by <code>i64</code>, returning the previous value.\nDecrements the given metric by <code>n</code>.\nEncodes all metrics into a string in the OpenMetrics text …\nEncode the metrics item in the OpenMetrics text format.\nEncode the metrics item in the OpenMetrics text format.\nEncodes this metric item to OpenMetrics format.\nWrites <code># EOF\\n</code> to <code>writer</code>.\nEncodes the metrics in the OpenMetrics text format into a …\nEncodes the metrics in the OpenMetrics text format into a …\nEncodes all metrics in the OpenMetrics text format.\nEncodes the schema of all registered metrics into the …\nEncodes the current values of all registered metrics into …\nExports the current state of the registry as an update.\nExports the current state of the registry as serialized …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current value of the <code>Counter</code>.\nReturns the <code>Gauge</code> value.\nReturns an iterator over references to the <code>MetricsGroup</code> in …\nReturns an iterator over owned clones of the <code>MetricsGroup</code> …\nReturns the help of this metric item.\nReturns the help of this metric item.\nHelp text describing the metric\nImports a metric update.\nImports a metric update from serialized bytes.\nIncreases the <code>Counter</code> by 1, returning the previous value.\nIncreases the <code>Gauge</code> by 1, returning the previous value.\nIncrements the given metric by 1.\nIncreases the <code>Counter</code> by <code>u64</code>, returning the previous value.\nIncreases the <code>Gauge</code> by <code>i64</code>, returning the previous value.\nIncrements the given metric by <code>n</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe individual metric schemas\nThe individual metric values\nReturns an iterator over all metric items with their …\nReturns an iterator over all metric items with their …\nReturns an iterator over all metrics in this metrics group …\nReturns an iterator over all metrics in this metrics group …\nCreates an iterator over the decoded metric items.\nTraits for iterating over the fields of structs.\nLabels associated with the metric as key-value pairs\nReturns the name of this metrics group.\nReturns the name of this metrics group set.\nReturns the name of this metric item.\nReturns the name of this metric item.\nThe name of the metric\nReturns a new metric item.\nCreates a new encoder for the given registry.\nConstructs a new counter, based on the given <code>help</code>.\nConstructs a new gauge, based on the given <code>help</code>.\nParses Prometheus metrics from a string.\nReturns the name prefixed with all prefixes.\nPrefixes to prepend to the metric name\nRegisters a <code>MetricsGroup</code> into this registry.\nRegisters a <code>MetricsGroupSet</code> into this registry.\nRegisters a <code>MetricsGroupSet</code> into this registry, prefixing …\nOptional schema information (included when schema changes)\nReference to the metric’s schema information\nReturns the current schema version of this registry.\nFunctions to start services that deal with metrics exposed …\nSets the <code>Counter</code> value, returning the previous value.\nSets the <code>Gauge</code> to <code>v</code>, returning the previous value.\nSets the given metric to <code>n</code>.\nMetrics collection in a static, process-level global …\nCreates a subregistry where all metrics have a <code>key=value</code> …\nCreates a subregistry where all metrics are labeled.\nCreates a subregistry where all metrics are prefixed with …\nReturns the value as <code>f32</code>.\nReturns the <code>MetricType</code> for this item.\nReturns the type of this metric.\nReturns the <code>MetricType</code> for this item.\nReturns the <code>MetricType</code> for this metric value.\nThe type of the metric (Counter, Gauge, etc.)\nReturns the current value of this item.\nReturns the current value of this metric.\nReturns the current value of this item.\nReference to the metric’s current value\nThe metric values\nIterator over the fields of a struct.\nHelper trait to convert from <code>self</code> to <code>dyn Iterable</code>.\nTrait for iterating over the fields of a struct.\nDerives <code>Iterable</code> for a struct.\nReturns <code>self</code> as <code>dyn Iterable</code>\nReturns the number of fields in the struct.\nReturns an iterator over the fields of the struct.\nReturns the field name and dyn reference to the field.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfiguration for pushing metrics to a remote endpoint.\nThe endpoint url for the push metrics collector.\nReturns the argument unchanged.\nThe name of the instance you’re exporting metrics for.\nThe push interval.\nCalls <code>U::from(self)</code>.\nThe password for basic auth for the push metrics collector.\nThe name of the service you’re exporting metrics for.\nStart a metrics dumper service.\nStart a metrics exporter service.\nStart a HTTP server to expose metrics .\nThe username for basic auth for the push metrics collector.\nCore is the base metrics struct.\nThis struct can be used with the functions in …\nEncodes the current metrics registry to a string in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the core metrics.\nReturns a reference to the mapped metrics instance.\nMust only be called once to init metrics.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a reference to the prometheus registry.\nTrieds to init the metrics.")